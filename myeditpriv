#!/usr/bin/env python3

import argparse
import sys
import signal
import json
import os

# Import necessary modules for Instagram Graph API interaction
import requests

# Define if running on Windows or Linux
is_windows = False
try:
    import gnureadline
except ImportError:
    is_windows = True
    try:
        import pyreadline
    except ImportError:
        pass  # Handle absence gracefully

# Simple print logo and information
def printlogo():
    print("""
    Version 1.1 - Developed by Giuseppe Criscione
    -------------------------------
    Type 'list' to show all allowed commands
    Type 'FILE=y' to save results to files like '<target username>_<command>.txt'
    Type 'JSON=y' to export results to a JSON file
    """)

# List of commands available to the user
def cmdlist():
    print("""
    FILE=y/n     Enable/disable output in a '<target username>_<command>.txt' file
    JSON=y/n     Enable/disable export in a '<target username>_<command>.json' file
    addrs        Get all registered addresses by target photos
    captions     Get target's photos captions
    comments     Get total comments of target's posts
    followers    Get target followers
    followings   Get users followed by target
    info         Get target info
    """)

def signal_handler(sig, frame):
    print("\nGoodbye!")
    sys.exit(0)

# Handle command completion
def completer(text, state):
    options = [i for i in commands if i.startswith(text)]
    if state < len(options):
        return options[state]
    else:
        return None

# Command for quitting
def _quit():
    print("Goodbye!")
    sys.exit(0)

signal.signal(signal.SIGINT, signal_handler)

# Setup readline for Linux or Windows environments
if not is_windows:
    try:
        import readline
        readline.parse_and_bind("tab: complete")
        readline.set_completer(completer)
    except ImportError:
        pass

# API access to Instagram (using Graph API)
class InstagramAPI:
    def __init__(self, username, token, file_output=False, json_output=False):
        self.username = username
        self.token = token
        self.file_output = file_output
        self.json_output = json_output
        self.base_url = "https://graph.instagram.com"
    
    def get_user_info(self):
        """ Fetch basic user info using Instagram Graph API """
        url = f"{self.base_url}/{self.username}?fields=id,username,media_count,follower_count,following_count&access_token={self.token}"
        response = requests.get(url)
        return response.json()

    def get_followers(self):
        """ Get followers list """
        url = f"{self.base_url}/{self.username}/followers?access_token={self.token}"
        response = requests.get(url)
        return response.json()

    def get_photos(self):
        """ Get user photos """
        url = f"{self.base_url}/{self.username}/media?fields=id,caption,media_type,media_url&access_token={self.token}"
        response = requests.get(url)
        return response.json()

    # More functions as needed...

    def save_output(self, data, filename):
        if self.file_output:
            with open(filename, 'w') as file:
                file.write(data)

        if self.json_output:
            with open(filename.replace('.txt', '.json'), 'w') as json_file:
                json.dump(data, json_file, indent=4)

# Parse command-line arguments
parser = argparse.ArgumentParser(description="Osintgram - OSINT tool for Instagram")
parser.add_argument('username', type=str, help="Instagram username")
parser.add_argument('access_token', type=str, help="Instagram API access token")
parser.add_argument('-C', '--cookies', help="clear previous cookies", action="store_true")
parser.add_argument('-j', '--json', help='Save output as JSON', action='store_true')
parser.add_argument('-f', '--file', help='Save output in a file', action='store_true')
parser.add_argument('-c', '--command', help='Run a single command', action='store')
parser.add_argument('-o', '--output', help='Where to store photos', action='store')

args = parser.parse_args()

# Initialize the Instagram API class
api = InstagramAPI(args.username, args.access_token, args.file, args.json)

# Commands list
commands = {
    'list': cmdlist,
    'help': cmdlist,
    'quit': _quit,
    'exit': _quit,
    'info': api.get_user_info,
    'followers': api.get_followers,
    'photos': api.get_photos,
}

# Display logo
if not args.command:
    printlogo()

while True:
    if args.command:
        cmd = args.command
        _cmd = commands.get(cmd)
    else:
        print("Run a command: ", end="")
        cmd = input().strip()

        _cmd = com
